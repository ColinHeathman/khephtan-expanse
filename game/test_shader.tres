[gd_resource type="VisualShader" load_steps=7 format=3 uid="uid://bswk5wuqiolmv"]

[ext_resource type="Script" path="res://addons/perlin_noise_3d/perlin_noise_3d.gd" id="1_g8yfl"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_qclgc"]
output_port_for_preview = 0
default_input_values = [2, 0.0]
initialized = true
script = ExtResource("1_g8yfl")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_s4dce"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVec2Constant" id="VisualShaderNodeVec2Constant_imiar"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_ouypo"]
constant = 10.0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_bok88"]
input_name = "time"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;



// PerlinNoise3D

        vec3 mod289_3(vec3 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 mod289_4(vec4 x) {
            return x - floor(x * (1.0 / 289.0)) * 289.0;
        }

        vec4 permute(vec4 x) {
            return mod289_4(((x * 34.0) + 1.0) * x);
        }

        vec4 taylorInvSqrt(vec4 r) {
            return 1.79284291400159 - 0.85373472095314 * r;
        }

        vec3 fade(vec3 t) {
            return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);
        }

        // Classic Perlin noise.
        float cnoise(vec3 P) {
            vec3 Pi0 = floor(P); // Integer part for indexing.
            vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1.
            Pi0 = mod289_3(Pi0);
            Pi1 = mod289_3(Pi1);
            vec3 Pf0 = fract(P); // Fractional part for interpolation.
            vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0.
            vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
            vec4 iy = vec4(Pi0.yy, Pi1.yy);
            vec4 iz0 = vec4(Pi0.z);
            vec4 iz1 = vec4(Pi1.z);

            vec4 ixy = permute(permute(ix) + iy);
            vec4 ixy0 = permute(ixy + iz0);
            vec4 ixy1 = permute(ixy + iz1);

            vec4 gx0 = ixy0 * (1.0 / 7.0);
            vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
            gx0 = fract(gx0);
            vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
            vec4 sz0 = step(gz0, vec4(0.0));
            gx0 -= sz0 * (step(0.0, gx0) - 0.5);
            gy0 -= sz0 * (step(0.0, gy0) - 0.5);

            vec4 gx1 = ixy1 * (1.0 / 7.0);
            vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
            gx1 = fract(gx1);
            vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
            vec4 sz1 = step(gz1, vec4(0.0));
            gx1 -= sz1 * (step(0.0, gx1) - 0.5);
            gy1 -= sz1 * (step(0.0, gy1) - 0.5);

            vec3 g000 = vec3(gx0.x, gy0.x, gz0.x);
            vec3 g100 = vec3(gx0.y, gy0.y, gz0.y);
            vec3 g010 = vec3(gx0.z, gy0.z, gz0.z);
            vec3 g110 = vec3(gx0.w, gy0.w, gz0.w);
            vec3 g001 = vec3(gx1.x, gy1.x, gz1.x);
            vec3 g101 = vec3(gx1.y, gy1.y, gz1.y);
            vec3 g011 = vec3(gx1.z, gy1.z, gz1.z);
            vec3 g111 = vec3(gx1.w, gy1.w, gz1.w);

            vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
            g000 *= norm0.x;
            g010 *= norm0.y;
            g100 *= norm0.z;
            g110 *= norm0.w;
            vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
            g001 *= norm1.x;
            g011 *= norm1.y;
            g101 *= norm1.z;
            g111 *= norm1.w;

            float n000 = dot(g000, Pf0);
            float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
            float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
            float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
            float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
            float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
            float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
            float n111 = dot(g111, Pf1);

            vec3 fade_xyz = fade(Pf0);
            vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
            vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
            float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
            return 2.2 * n_xyz;
        }
    

void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// Vector2Constant:4
	vec2 n_out4p0 = vec2(0.000000, 0.000000);


// FloatConstant:5
	float n_out5p0 = 10.000000;


// Input:6
	float n_out6p0 = TIME;


	float n_out2p0;
// PerlinNoise3D:2
	{
		n_out2p0 = cnoise(vec3((vec3(n_out3p0, 0.0).xy + vec3(n_out4p0, 0.0).xy) * n_out5p0, n_out6p0)) * 0.5 + 0.5;
	}


// Output:0
	COLOR.rgb = vec3(n_out2p0);


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(200, 240)
nodes/fragment/2/node = SubResource("VisualShaderNodeCustom_qclgc")
nodes/fragment/2/position = Vector2(-138.7, 243.3)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_s4dce")
nodes/fragment/3/position = Vector2(-560, 200)
nodes/fragment/4/node = SubResource("VisualShaderNodeVec2Constant_imiar")
nodes/fragment/4/position = Vector2(-540, 300)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatConstant_ouypo")
nodes/fragment/5/position = Vector2(-540, 420)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_bok88")
nodes/fragment/6/position = Vector2(-640, 540)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 2, 0, 0, 0)
